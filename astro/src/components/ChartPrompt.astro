<canvas id="chartBar" class="">The chart is currently unavailable</canvas>

<script>
  import resolveConfig from 'tailwindcss/resolveConfig';
  import tailwindConfig from '../../tailwind.config.mjs';
import { fade } from 'astro:transitions';
  const fullConfig = resolveConfig(tailwindConfig)
  const {colors} = fullConfig.theme;

  document.addEventListener('DOMContentLoaded', () => {
    createChart(document.getElementById("chartBar"));
  })

  const helpers = {
    isDarkMode: () => window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches,
    isMobile: () => parseInt(fullConfig.theme.screens.lg) >= window.outerWidth
  }

  function createChart (el) {
    import('chart.js/auto').then(({Chart}) => {
      Chart.defaults.font.family = fullConfig.theme.fontFamily.sans.join(', ');
      Chart.defaults.color = colors.gray[500];
      if (helpers.isDarkMode()) {
        Chart.defaults.borderColor = colors.gray[800];
        Chart.defaults.font.weight = 'normal';
        Chart.defaults.font.lineHeight = 1.3
      }
      // console.log(Chart.defaults.font.family)

      const data = [
        { title: 'ChatGPT as a reviewer', count: 59 },
        { title: 'CodeReviewer [WOLF]', count: 111 },
        { title: 'ChatGPT CodeReviewer', count: 125 },
        { title: 'OpenAI ChatGPT Code Review', count: 133 },
        { title: 'Code Review with ChatGPT', count: 267 },
        { title: 'ChatGPT GPT-3.5 Turbo reviewer and linter', count: 465 },
        { title: 'GitHub Actions ChatGPT PR Reviewer', count: 760 },
        { title: 'MATE', count: 2614 },
      ];

      const customCanvasBackgroundColor = {
        id: 'customCanvasBackgroundColor',
        beforeDraw: (chart, args, options) => {
          const {ctx} = chart;
          ctx.save();
          ctx.globalCompositeOperation = 'destination-over';
          ctx.fillStyle = helpers.isDarkMode() ? colors.dark : helpers.isMobile() ? colors.white : colors.gray[50];
          // ctx.strokeStyle = isDarkMode() ? colors.gradient1 : colors.gradient2;
          ctx.fillRect(0, 0, chart.width, chart.height);
          ctx.restore();
        }
      };

      new Chart(
          el,
          {
            type: 'bar',
            plugins: [customCanvasBackgroundColor],
            options: {
              // animations: {
              //   tension: {
              //     delay: 1000,
              //     easing: 'linear',
              //     from: 1,
              //     to: 0,
              //   },
              // },
              // aspectRatio: 1,
              plugins: {
                legend: {
                  display: false
                },
                // tooltip: {
                  // enabled: false
                // },
                subtitle: {
                  display: true,
                  text: 'Prompt length',
                  padding: {
                    bottom: 10
                  }
                }
              },
              elements: {
                bar: {
                  // backgroundColor: helpers.isDarkMode() ? colors.gradient1 : colors.gradient2,
                  borderRadius: 4,
                }
              },
              interaction: {
                intersect: false
              }
            },
            data: {
              labels: data.map(col => col.title),
              datasets: [
                {
                    label: 'Symbols',
                    data: data.map(col => col.count),
                    backgroundColor: data.map(col => col.title === 'MATE' ? colors.gradient2 : colors.gray[300]),
                }
              ]
            }
          }
        );
      }
    );
  }
</script>